
# 파일 경로 설정 라이브러리 설정

```
pop.path<-"../Popular/"
notPop.path<-"../Notpop"

library(ggplot2)
library(tm)
library(koNLP)

install.package('KoNLP')
install.package('tm')
```

# get.msg함수 수정 후 인기있는 문서 읽기

```
get.msg<-function(path){
   con<-file(path, open="rt", encoding="UTF-8")
   print("--------------------------------------------------------------------------------Start Con------------------------------------------------------------------------------")
   print(head(con))
   text<-readLines(con)
   text<-noquote(text)
   text<-gsub(",","",text)
   text<-gsub("“","",text)
   text<-gsub("”","",text)
   text<-gsub("‘","",text)
   text<-gsub("’","",text)
   text<-gsub("·","",text)
   Noun<-extractNoun(text)
   text<-c(Noun)
   close(con)
   return(paste(text,collapse="\n"))
}

pop.docs<-dir(pop.path)
all.pop<-sapply(pop.docs, function(p) get.msg(paste(pop.path,p,sep="/")))

 get.tdm<-function(doc.vec){
    doc.corpus<-Corpus(VectorSource(doc.vec))
    control<-list(removePunctuation=TRUE, removeNumbers=TRUE, minDocFreq=2)
    doc.dtm<-TermDocumentMatrix(doc.corpus,control)
    return(doc.dtm)
 }

pop.tdm<-get.tdm(all.pop)

pop.matrix <- as.matrix(pop.tdm)
print(pop.matrix)
```

# 인기있는 글 베이즈 분류 학습시키기
```
pop.tdm <- as.matrix(pop.tdm)

pop.counts<-rowSums(pop.matrix)

pop.df<-data.frame(cbind(names(pop.counts),as.numeric(pop.counts)),stringsAsFactors=FALSE)

names(pop.df)<-c("term", "frequency")
pop.df$frequency<-as.numeric(pop.df$frequency)

pop.occurrence<-sapply(1:nrow(pop.matrix), function(i){
     length(which(pop.matrix[i,]>0))/ncol(pop.matrix)
})

pop.density<-pop.df$frequency/sum(pop.df$frequency)
pop.df<-transform(pop.df, density=pop.density,occurrence=pop.occurrence)

head(pop.df[with(pop.df, order(-occurrence)),])
```
# 인기 없는 글 베이즈 분류 학습시키기
```
notpop.docs<-dir(notpop.path)
notpop.docs<-notpop.docs[which(notpop.docs!="cmds")]
all.notpop<-sapply(notpop.docs, function(p) get.msg(paste(notpop.path,p,sep="/")))
notpop.tdm<-get.tdm(all.notpop)
notpop.matrix <- as.matrix(notpop.tdm)
notpop.counts<-rowSums(notpop.matrix)
notpop.df<-data.frame(cbind(names(notpop.counts),as.numeric(notpop.counts)),stringsAsFactors=FALSE)
names(notpop.df)<-c("term", "frequency")
notpop.df$frequency<-as.numeric(notpop.df$frequency)
notpop.occurrence<-sapply(1:nrow(notpop.matrix), function(i){
   length(which(notpop.matrix[i,]>0))/ncol(notpop.matrix)
})
notpop.density<-notpop.df$frequency/sum(notpop.df$frequency)
notpop.df<-transform(notpop.df, density=notpop.density,occurrence=notpop.occurrence)
```
# 검증하기
```
classify.email<-function(path, training.df, prior=0.5, c=1e-6){
   msg<-get.msg(path)
   msg.tdm<-get.tdm(msg)
   msg.freq<-rowSums(as.matrix(msg.tdm))
   msg.match<-intersect(names(msg.freq),training.df$term)
   if(length(msg.match)<1){
      return (prior*c^(length(msg.freq)))
   }
   else{
      match.probs<-training.df$occurrence[match(msg.match, training.df$term)]
      return (prior*prod(match.probs)*c^(length(msg.freq)-length(msg.match)))
   }
}
```
# 분류기 실행해보기
```
realPop.docs<-dir(realPop.path)
realPop.poptest<-sapply(realPop.docs, function(p) classify.email(paste(realPop.path,p,sep="/"),training.df=realPop.df))
realPop.poptest<-sapply(realPop.docs, function(p) classify.email(paste(realPop.path,p,sep="/"),training.df=notPop.df))
realPop.res<-ifelse(realPop.poptest > realpop.notpoptest,TRUE,FALSE)
summary(realPop.res)
```
![image](https://github.com/gwnuysw/PoliticsTrendDM/blob/master/capture/first_pop_matrix.png?raw=true)
